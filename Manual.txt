Steps to start this project will be 

1 - Creating the folders 
    - create two folder Backend and frontend 
    - For starting a project the project should start with Backend folder 
    - create a file called server.js
    - install packages in this folder for this follow this commands 
                    "cd Backend"  ( this will take you to that folder)
                    "npm init -y" (to install packages related to node)
                    "npm install express" (To install express for routing as in to get requests from the frontend)
    - Start writing the code in server.js
    - Now the server file has the code to get the server code and the listening of the server 
    - do install nodemon to run the file on the browser to install write on the terminal 
                    "npm install -g nodemon"  (to install the nodemon)
                    "nodemon server.js"  ( to run the file ) , you can also do "npm start"
    - You will every time you change something the server detects and gives a message "Restarting the server due to changes" and " App crashed " which means 
      there is and error in the file
    -create a file called .env write the port no in it also install the env by "npm install dotenv"
    -For testing the requests we need to use the "POSTMAN" available on the desktop
    -The postman allows to simulate our requests in other words we need to check whether our requests are being sent and working properly or not 


2 - Calling different API endpoints such as GET POST DELETE and PATCH

   - Write the endpoints code in the workouts.js and then
   - connect it with the server.js with 4 different functions which are post ,get , delete and patch(update) 
   - Test all the functions with the postman app\
   - Check if all routing are possible or not
   - just write localhost:4000/ap/workouts and apply different functions and send see whether you are getting the result or 
   - If not check the server is already on or not as it is necessary to be on 
   - Save each function in a collection called Mern stack app provided in the left side of the postman app



3 - Now Connecting the database which is the Mongodb
   - We need to work with the Mongodb Atlas which is also a cloud database where we will create a data cluster and connect it with our Mongodb database 
   - So first Go on to the mongodb atlas website and there sign in with your credentials and You will get a UI 
   - On top left there will be option of create a new project not clearly but this is definitely a kind is present there
   - Create a new project  with a name then you have to create a cluster you can also name it choose the shared and the free version for deployment and then deploy it
   - You will get a connect button which will lead to choose your database username and password and then while choosing connecting methods choose the drivers option
     as we have to connect it in the vs code and that too with the nodejs so connect like that 
   - after connecting just follow the codes you will get some of it 
   - Make sure that after connecting to the server you are getting a message of the database connection too which will be in the terminal section 
   - And still if not getting about the mongodb part just follow the steps from youtube or anything you like as nothing more is needed 


4 - Making different database models and schemas 
    - now when we will input the data on the frontend side so the data is getting stored 
    - Here we will work upon how the data will be stored and also we will relate different schemas together to store the data 
    - firstly create a models folder and create a file workoutmodels.js 
          - here you have to create the schema where the data would be saved which is connected to the database 
    - in the workout.js which is used for routing , Go to the  route.post code where we actually write the code which says whatever the input it will saved to the 
      database in this manner 
    - Now add the workout.js to the server.js telling pls connect the database of workouts to the server 
    - the connection goes like server <--->workouts.js<---->workoutmodels.js
    - In this way the data will be stored 

5 - Controllers 
    - Now we have to add more docs and more routing to do so lets goo
    - its like adding one more additional layer between both the server and workouts 
    - The advantage solely goes to the developer who has the independence to change the things independently without affecting the other functions 
    - for this create a folder Controllers and add a file workoutControllers 
    - The connection goes like server <---> workouts.js(routes folder) <---> workoutControllers.js (Controllers folder) <---> workoutmodels.js(Models folder)



  BY THIS WE HAVE COMPLETED THE BACKEND part

  6 - Starting the frontend 
      


  


    